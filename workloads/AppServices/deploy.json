{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "webAppPortalName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Web Application Portal Name"
      }
    },
    "hostingPlanName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Application Service Plan"
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "defaultValue": "F1",
      "metadata": {
        "description": "Optional. The pricing tier for the hosting plan."
      }
    },
    "workerSize": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Optional. Defines the number of workers from the worker pool that will be used by the app service plan"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of the Diagnostic Storage Account."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "lockForDeletion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Switch to lock Key Vault from deletion."
      }
    },
    "privateEndpoints": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Configuration Details for private endpoints."
            }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
      },
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    }
  },
  "variables": {
    "diagnosticsMetrics": [
      {
        "category": "AllMetrics",
        "enabled": true,
        "retentionPolicy": {
          "days": "[parameters('diagnosticLogsRetentionInDays')]",
          "enabled": true
        }
      }
    ],
    "diagnosticsLogs": [
      {
        "category": "AppServiceHTTPLogs",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "AppServiceConsoleLogs",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "AppServiceAppLogs",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "AppServiceFileAuditLogs",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "AppServiceAuditLogs",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ]
  },
  "resources": [
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('pid-', parameters('cuaId'))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "name": "[parameters('hostingPlanName')]",
      "kind": "app",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('sku')]",
        "capacity": "[parameters('workerSize')]"
      },
      "properties": {
        "name": "[parameters('hostingPlanName')]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "name": "[parameters('webAppPortalName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms',parameters('hostingPlanName'))]"
      ],
      "kind": "app",
      "tags": "[parameters('tags')]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms',parameters('hostingPlanName'))]",
        "httpsOnly": true
      },
      "resources": [
        {
          "type": "providers/locks",
          "apiVersion": "2016-09-01",
          "condition": "[parameters('lockForDeletion')]",
          "name": "Microsoft.Authorization/webAppDoNotDelete",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', parameters('webAppPortalName'))]"
          ],
          "comments": "Resource lock",
          "properties": {
            "level": "CannotDelete"
          }
        },
        {
          "type": "Microsoft.Web/sites/providers/diagnosticsettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[concat(parameters('webAppPortalName'), '/Microsoft.Insights/service')]",
          "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', parameters('webAppPortalName'))]"
          ],
          "properties": {
            "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
            "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
            "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
            "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
            "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
            "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
          }
        }
      ]
    },
    // Private Endpoints
    {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "name": "[concat(uniqueString(deployment().name, parameters('location')), '-AppService-PrivateEndpoints','-',copyIndex())]",
        "condition": "[not(empty(parameters('privateEndpoints')))]",
        "dependsOn": [
            "[parameters('webAppPortalName')]"
        ],
        "copy": {
            "name": "privateEndpointsCopy",
            "count": "[length(parameters('privateEndpoints'))]"
        },
        "properties": {
            "mode": "Incremental",
            "expressionEvaluationOptions": {
                "scope": "inner"
            },
            "parameters": {
                "privateEndpointResourceId": {
                    "value": "[resourceId('Microsoft.Web/sites/', parameters('webAppPortalName'))]"
                },
                "privateEndpointVnetLocation": {
                    "value": "[if(empty(parameters('privateEndpoints')),'dummy',reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId,'/subnets/')[0],'2020-06-01', 'Full').location)]"
                },
                "privateEndpoint": {
                    "value": "[parameters('privateEndpoints')[copyIndex()]]"
                },
                "tags": {
                    "value": "[parameters('tags')]"
                }
            },
            "template": {
                "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.0",
                "parameters": {
                    "privateEndpointResourceId": {
                        "type": "string"
                    },
                    "privateEndpointVnetLocation": {
                        "type": "string"
                    },
                    "privateEndpoint": {
                        "type": "object"
                    },
                    "tags": {
                        "type": "object"
                    }
                },
                "variables": {
                    "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'),'/'))]",
                    "privateEndpoint": {
                        "name": "[if(contains(parameters('privateEndpoint'), 'name'),if(empty(parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service),parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service))]",
                        "subnetResourceId": "[parameters('privateEndpoint').subnetResourceId]",
                        "service": [
                            "[parameters('privateEndpoint').service]"
                        ],
                        "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpoint'), 'privateDnsZoneResourceIds'),if(empty(parameters('privateEndpoint').privateDnsZoneResourceIds),createArray(),parameters('privateEndpoint').privateDnsZoneResourceIds),createArray())]",
                        "customDnsConfigs": "[if(contains(parameters('privateEndpoint'), 'customDnsConfigs'),if(empty(parameters('privateEndpoint').customDnsConfigs),json('null'),parameters('privateEndpoint').customDnsConfigs),json('null'))]"
                    }
                },
                "resources": [
                    {
                        "type": "Microsoft.Network/privateEndpoints",
                        "apiVersion": "2020-05-01",
                        "name": "[variables('privateEndpoint').name]",
                        "location": "[parameters('privateEndpointVnetLocation')]",
                        "tags": "[parameters('tags')]",
                        "properties": {
                            "privateLinkServiceConnections": [
                                {
                                    "name": "[variables('privateEndpoint').name]",
                                    "properties": {
                                        "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                                        "groupIds": "[variables('privateEndpoint').service]"
                                    }
                                }
                            ],
                            "manualPrivateLinkServiceConnections": [],
                            "subnet": {
                                "id": "[variables('privateEndpoint').subnetResourceId]"
                            },
                            "customDnsConfigs": "[variables('privateEndpoint').customDnsConfigs]"
                        }
                    },
                    {
                        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                        "apiVersion": "2020-05-01",
                        "condition": "[not(empty(variables('privateEndpoint').privateDnsZoneResourceIds))]",
                        "name": "[concat(variables('privateEndpoint').name, '/default')]",
                        "dependsOn": [
                            "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint').name)]"
                        ],
                        "properties": {
                            "copy": [
                                {
                                    "name": "privateDnsZoneConfigs",
                                    "count": "[length(variables('privateEndpoint').privateDnsZoneResourceIds)]",
                                    "input": {
                                        "name": "[last(split(variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')],'/'))]",
                                        "properties": {
                                            "privateDnsZoneId": "[variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    }
  ],
  "functions": [
  ],
  "outputs": {
    "appServiceName": {
      "type": "string",
      "value": "[parameters('hostingPlanName')]",
      "metadata": {
        "description": "The Name of the Application Web Services"
      }
    },
    "appServiceResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Web/serverfarms',parameters('hostingPlanName'))]",
      "metadata": {
        "description": "The Resource Id of the Application Web Services"
      }
    },
    "appServiceResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group with the Application Web Services"
      }
    }
  }
}
