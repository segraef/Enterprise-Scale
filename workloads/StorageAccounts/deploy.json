{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "storageAccountName": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 24,
            "metadata": {
                "description": "Optional. Name of the Storage Account. If no name is provided, then unique name will be created."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "roleAssignments": {
            "defaultValue": [
            ],
            "type": "array",
            "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or it's fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
            }
        },
        "managedServiceIdentity": {
            "type": "string",
            "defaultValue": "None",
            "allowedValues": [
                "None",
                "SystemAssigned",
                "UserAssigned",
                "SystemAssigned, UserAssigned",
                "UserAssigned, SystemAssigned"
            ],
            "metadata": {
                "description": "Optional. Type of managed service identity."
            }
        },
        "userAssignedIdentities": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Optional. Mandatory 'managedServiceIdentity' contains UserAssigned. The identy to assign to the resource."
            }
        },
        "storageAccountKind": {
            "type": "string",
            "defaultValue": "StorageV2",
            "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage",
                "FileStorage",
                "BlockBlobStorage"
            ],
            "metadata": {
                "description": "Optional. Type of Storage Account to create."
            }
        },
        "storageAccountSku": {
            "type": "string",
            "defaultValue": "Standard_GRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
            ],
            "metadata": {
                "description": "Optional. Storage Account Sku Name."
            }
        },
        "storageAccountAccessTier": {
            "type": "string",
            "defaultValue": "Hot",
            "allowedValues": [
                "Hot",
                "Cool"
            ],
            "metadata": {
                "description": "Optional. Storage Account Access Tier."
            }
        },
        "azureFilesIdentityBasedAuthentication": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Provides the identity based authentication settings for Azure Files."
            }
        },
        "vNetId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Virtual Network Identifier used to create a service endpoint."
            }
        },
        "privateEndpoints": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Configuration Details for private endpoints."
            }
        },
        "networkAcls": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information."
            }
        },
        "blobContainers": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Blob containers to create."
            }
        },
        "deleteRetentionPolicy": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Indicates whether DeleteRetentionPolicy is enabled for the Blob service."
            }
        },
        "deleteRetentionPolicyDays": {
            "type": "int",
            "defaultValue": 7,
            "metadata": {
                "description": "Optional. Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365."
            }
        },
        "automaticSnapshotPolicyEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Automatic Snapshot is enabled if set to true."
            }
        },
        "allowBlobPublicAccess": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account."
            }
        },
        "fileShares": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. File shares to create."
            }
        },
        "queues": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Queues to create."
            }
        },
        "tables": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Tables to create."
            }
        },
        "minimumTlsVersion": {
            "type": "string",
            "defaultValue": "TLS1_2",
            "allowedValues": [
                "TLS1_0",
                "TLS1_1",
                "TLS1_2"
            ],
            "metadata": {
                "description": "Optional. Set the minimum TLS version on request to storage."
            }
        },
        "enableArchiveAndDelete": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. If true, enables move to archive tier and auto-delete"
            }
        },
        "enableHierarchicalNamespace": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. If true, enables Hierarchical Namespace for the storage account"
            }
        },
        "moveToArchiveAfter": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Optional. Set up the amount of days after which the blobs will be moved to archive tier"
            }
        },
        "deleteBlobsAfter": {
            "type": "int",
            "defaultValue": 1096,
            "metadata": {
                "description": "Optional. Set up the amount of days after which the blobs will be deleted"
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Switch to lock storage from deletion."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags of the resource."
            }
        },
        "cuaId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
            }
        },
        "sasTokenValidityLength": {
            "defaultValue": "PT8H",
            "type": "string",
            "metadata": {
                "description": "Optional. SAS token validity length. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
            }
        },
        "baseTime": {
            "type": "string",
            "defaultValue": "[utcNow('u')]",
            "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
            }
        }
    },
    "variables": {
        // SAS token validity calculation - DO NOT CHANGE THESE VALUES !

        "moduleName": "Storage Account",
        "maxNameLength": 24,
        "uniqueStoragenameUntrim": "[uniqueString(concat(variables('moduleName'),parameters('baseTime')))]",
        "uniqueStoragename": "[if(greater(length(variables('uniqueStoragenameUntrim')),variables('maxNameLength')),substring(variables('uniqueStoragenameUntrim'),0,variables('maxNameLength')),variables('uniqueStoragenameUntrim'))]",
        "storageAccountName": "[if(empty(parameters('storageAccountName')),variables('uniqueStoragename'),parameters('storageAccountName'))]",

        "accountSasProperties": {
            "signedServices": "bt", //Blob (b), Queue (q), Table (t), File (f).
            "signedPermission": "racuw", //Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p)
            "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]", //format: 2017-05-24T10:42:03Z
            "signedResourceTypes": "co", //Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
            "signedProtocol": "https"
        },
        "virtualNetworkRules": {
            "copy": [
                {
                    "name": "virtualNetworkRules",
                    "count": "[if(empty(parameters('networkAcls')), 0, length(parameters('networkAcls').virtualNetworkRules))]",
                    "input": {
                        "id": "[concat(parameters('vNetId'), '/subnets/', parameters('networkAcls').virtualNetworkRules[copyIndex('virtualNetworkRules')].subnet)]"
                    }
                }
            ]
        },
        "networkAcls": {
            "bypass": "[if(empty(parameters('networkAcls')), json('null'), parameters('networkAcls').bypass)]",
            "defaultAction": "[if(empty(parameters('networkAcls')), json('null'), parameters('networkAcls').defaultAction)]",
            "virtualNetworkRules": "[if(empty(parameters('networkAcls')), json('null'), variables('virtualNetworkRules').virtualNetworkRules)]",
            "ipRules": "[if(empty(parameters('networkAcls')), json('null'), if(equals(length(parameters('networkAcls').ipRules), 0), json('null'), parameters('networkAcls').ipRules))]"
        },
        "azureFilesIdentityBasedAuthentication": "[parameters('azureFilesIdentityBasedAuthentication')]",
        // It was needed to decouple the Stroage Account Parameters to a variable, as this was the only option to keep not let the azureFilesIdentityBasedAuthentication
        // configuration changed back to null, when not providing a corresponding input parameter. With other word, using the json('null') expression in the body
        // of the Storage Account's properties block did not achieve the desired results.
        "saBaseProperties": {
            "encryption": {
                "keySource": "Microsoft.Storage",
                "services": {
                    "blob": "[if(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage'), equals(parameters('storageAccountKind'), 'StorageV2'), equals(parameters('storageAccountKind'), 'Storage')), json('{\"enabled\": true}'), json('null'))]",
                    "file": "[if(or(equals(parameters('storageAccountKind'), 'FileStorage'), equals(parameters('storageAccountKind'), 'StorageV2'), equals(parameters('storageAccountKind'), 'Storage')), json('{\"enabled\": true}'), json('null'))]"
                }
            },
            "accessTier": "[parameters('storageAccountAccessTier')]",
            "supportsHttpsTrafficOnly": true,
            "isHnsEnabled": "[if(not(parameters('enableHierarchicalNamespace')), json('null'), parameters('enableHierarchicalNamespace'))]",
            "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
            "networkAcls": "[if(empty(parameters('networkAcls')), json('null'), variables('networkAcls'))]",
            "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]"
        },
        "saOptIdBasedAuthProperties": {
            "azureFilesIdentityBasedAuthentication": "[variables('azureFilesIdentityBasedAuthentication')]"
        },
        "saProperties": "[if(empty(parameters('azureFilesIdentityBasedAuthentication')), variables('saBaseProperties'), union(variables('saBaseProperties'), variables('saOptIdBasedAuthProperties') ))]",
        "builtInRoleNames": {
            "Avere Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4f8fab4f-1852-4a58-a46a-8eaf358af14a",
            "Avere Operator": "/providers/Microsoft.Authorization/roleDefinitions/c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
            "Backup Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
            "Backup Operator": "/providers/Microsoft.Authorization/roleDefinitions/00c29273-979b-4161-815c-10b084fb9324",
            "Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/a795c7a0-d4a2-40c1-ae25-d81f01202912",
            "Classic Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
            "Classic Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/985d6b00-f706-48f5-a6fe-d0ca12fb668d",
            "Data Box Contributor": "/providers/Microsoft.Authorization/roleDefinitions/add466c9-e687-43fc-8d98-dfcf8d720be5",
            "Data Box Reader": "/providers/Microsoft.Authorization/roleDefinitions/028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
            "Data Lake Analytics Developer": "/providers/Microsoft.Authorization/roleDefinitions/47b7735b-770e-4598-a7da-8b91488b4c88",
            "Reader and Data Access": "/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349",
            "Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
            "Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
            "Storage Blob Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "Storage Blob Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
            "Storage Blob Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "Storage Blob Delegator": "/providers/Microsoft.Authorization/roleDefinitions/db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
            "Storage File Data SMB Share Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
            "Storage File Data SMB Share Elevated Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a7264617-510b-434b-a828-9731dc254ea7",
            "Storage File Data SMB Share Reader": "/providers/Microsoft.Authorization/roleDefinitions/aba4ae5f-2193-4029-9191-0cb91df5e314",
            "Storage Queue Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88",
            "Storage Queue Data Message Processor": "/providers/Microsoft.Authorization/roleDefinitions/8a0f0c08-91a1-4084-bc3d-661d67233fed",
            "Storage Queue Data Message Sender": "/providers/Microsoft.Authorization/roleDefinitions/c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
            "Storage Queue Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/19e7f393-937e-4f77-808e-94535e297925",
            "Storage Table Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
            "Storage Table Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/76199698-9eea-4c19-bc75-cec21354c6b6"
        }
    },
    "resources": [
        // cuaId
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat('pid-', parameters('cuaId'))]",
            "condition": "[not(empty(parameters('cuaId')))]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        // storage account
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "kind": "[parameters('storageAccountKind')]",
            "sku": {
                "name": "[parameters('storageAccountSku')]"
            },
            "identity": {
                "type": "[parameters('managedServiceIdentity')]",
                "userAssignedIdentities": "[if(empty(parameters('userAssignedIdentities')),json('null'),parameters('userAssignedIdentities') )]"
            },
            "tags": "[parameters('tags')]",
            // It was needed to decouple the Storage Account Parameters to a variable, as this was the only option to keep not let the azureFilesIdentityBasedAuthentication
            // configuration changed back to null, when not providing a corresponding input parameter. With other word, using the json('null') expression in the body
            // of the Storage Account's properties block did not achieve the desired results.
            "properties": "[variables('saProperties')]",
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/storageDoNotDelete",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
                    ],
                    "comments": "Resource lock on the Storage Account",
                    "properties": {
                        "level": "CannotDelete"
                    }
                }
            ]
        },
        // private endpoints
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(uniqueString(deployment().name, parameters('location')), '-Storage-PrivateEndpoints','-',copyIndex())]",
            "condition": "[not(empty(parameters('privateEndpoints')))]",
            "dependsOn": [
                "[variables('storageAccountName')]"
            ],
            "copy": {
                "name": "privateEndpointsCopy",
                "count": "[length(parameters('privateEndpoints'))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "privateEndpointResourceId": {
                        "value": "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
                    },
                    "privateEndpointVnetLocation": {
                        "value": "[if(empty(parameters('privateEndpoints')),'dummy',reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId,'/subnets/')[0],'2020-06-01', 'Full').location)]"
                    },
                    "privateEndpoint": {
                        "value": "[parameters('privateEndpoints')[copyIndex()]]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "privateEndpointResourceId": {
                            "type": "string"
                        },
                        "privateEndpointVnetLocation": {
                            "type": "string"
                        },
                        "privateEndpoint": {
                            "type": "object"
                        },
                        "tags": {
                            "type": "object"
                        }
                    },
                    "variables": {
                        "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'),'/'))]",
                        "privateEndpoint": {
                            "name": "[if(contains(parameters('privateEndpoint'), 'name'),if(empty(parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service),parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service))]",
                            "subnetResourceId": "[parameters('privateEndpoint').subnetResourceId]",
                            "service": [
                                "[parameters('privateEndpoint').service]"
                            ],
                            "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpoint'), 'privateDnsZoneResourceIds'),if(empty(parameters('privateEndpoint').privateDnsZoneResourceIds),createArray(),parameters('privateEndpoint').privateDnsZoneResourceIds),createArray())]",
                            "customDnsConfigs": "[if(contains(parameters('privateEndpoint'), 'customDnsConfigs'),if(empty(parameters('privateEndpoint').customDnsConfigs),json('null'),parameters('privateEndpoint').customDnsConfigs),json('null'))]"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/privateEndpoints",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('privateEndpoint').name]",
                            "location": "[parameters('privateEndpointVnetLocation')]",
                            "tags": "[parameters('tags')]",
                            "properties": {
                                "privateLinkServiceConnections": [
                                    {
                                        "name": "[variables('privateEndpoint').name]",
                                        "properties": {
                                            "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                                            "groupIds": "[variables('privateEndpoint').service]"
                                        }
                                    }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                    "id": "[variables('privateEndpoint').subnetResourceId]"
                                },
                                "customDnsConfigs": "[variables('privateEndpoint').customDnsConfigs]"
                            }
                        },
                        {
                            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                            "apiVersion": "2020-05-01",
                            "condition": "[not(empty(variables('privateEndpoint').privateDnsZoneResourceIds))]",
                            "name": "[concat(variables('privateEndpoint').name, '/default')]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint').name)]"
                            ],
                            "properties": {
                                "copy": [
                                    {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(variables('privateEndpoint').privateDnsZoneResourceIds)]",
                                        "input": {
                                            "name": "[last(split(variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')],'/'))]",
                                            "properties": {
                                                "privateDnsZoneId": "[variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        // storage account RBAC
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(uniqueString(deployment().name, parameters('location')), '-Storage-Rbac-', copyIndex())]",
            "condition": "[not(empty(parameters('roleAssignments')))]",
            "dependsOn": [
                "[variables('storageAccountName')]"
            ],
            "copy": {
                "name": "storageRbacDeplCopy",
                "count": "[length(parameters('roleAssignments'))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "roleAssignment": {
                        "value": "[parameters('roleAssignments')[copyIndex()]]"
                    },
                    "builtInRoleNames": {
                        "value": "[variables('builtInRoleNames')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "roleAssignment": {
                            "type": "object"
                        },
                        "builtInRoleNames": {
                            "type": "object"
                        },
                        "storageAccountName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                            "apiVersion": "2020-04-01-preview",
                            "name": "[concat(parameters('storageAccountName'), '/Microsoft.Authorization/', guid(parameters('storageAccountName'), array(parameters('roleAssignment').principalIds)[copyIndex('storageInnerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ))]",
                            "dependsOn": [
                            ],
                            "copy": {
                                "name": "storageInnerRbacCopy",
                                "count": "[length(parameters('roleAssignment').principalIds)]"
                            },
                            "properties": {
                                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex()]]"
                            }
                        }
                    ]
                }
            }
        },
        // blob services
        {

            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storageAccountName'), '/default')]",
            "condition": "[not(empty(parameters('blobContainers')))]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
            ],
            "properties": {
                "deleteRetentionPolicy": {
                    "enabled": "[parameters('deleteRetentionPolicy')]",
                    "days": "[parameters('deleteRetentionPolicyDays')]"
                },
                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]"
            }
        },
        // storage container
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[if(empty(parameters('blobContainers')), concat(variables('storageAccountName'), '/', 'default/dummy'), concat(variables('storageAccountName'), '/default/', parameters('blobContainers')[copyIndex()].name))]",
            "condition": "[not(empty(parameters('blobContainers')))]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
            ],
            "copy": {
                "name": "containerLoop",
                "count": "[length(parameters('blobContainers'))]"
            },
            "properties": {
                "publicAccess": "[parameters('blobContainers')[copyIndex()].publicAccess]"
            },
            "resources": [
                {
                    "type": "immutabilityPolicies",
                    "apiVersion": "2019-06-01",
                    "name": "default",
                    "condition": "[and(not(empty(parameters('blobContainers'))),contains(parameters('blobContainers')[copyIndex('containerLoop')],'enableWORM'),parameters('blobContainers')[copyIndex('containerLoop')].enableWORM)]",
                    "dependsOn": [
                        "[concat(resourceId('Microsoft.Storage/storageAccounts/',variables('storageAccountName')),'/blobServices/default/containers/',if(empty(parameters('blobContainers')),'dummy',parameters('blobContainers')[copyIndex('containerLoop')].name))]"
                    ],
                    "properties": {
                        "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('blobContainers')[copyIndex('containerLoop')],'WORMRetention'),parameters('blobContainers')[copyIndex('containerLoop')].WORMRetention,365)]",
                        "allowProtectedAppendWrites": "[if(contains(parameters('blobContainers')[copyIndex('containerLoop')],'allowProtectedAppendWrites'),parameters('blobContainers')[copyIndex('containerLoop')].allowProtectedAppendWrites,true())]"
                    }
                }
            ]
        },
        // lifecycle policy
        {
            "type": "Microsoft.Storage/storageAccounts/managementPolicies",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storageAccountName'), '/default')]",
            "condition": "[parameters('enableArchiveAndDelete')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/',variables('storageAccountName'))]"
            ],
            "properties": {
                "policy": {
                    "rules": [
                        {
                            "enabled": true,
                            "name": "retention-policy",
                            "type": "Lifecycle",
                            "definition": {
                                "actions": {
                                    "baseBlob": {
                                        "tierToArchive": {
                                            "daysAfterModificationGreaterThan": "[parameters('moveToArchiveAfter')]"
                                        },
                                        "delete": {
                                            "daysAfterModificationGreaterThan": "[parameters('deleteBlobsAfter')]"
                                        }
                                    },
                                    "snapshot": {
                                        "delete": {
                                            "daysAfterCreationGreaterThan": "[parameters('deleteBlobsAfter')]"
                                        }
                                    }
                                },
                                "filters": {
                                    "blobTypes": [
                                        "blockBlob"
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        // storage container RBAC
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(uniqueString(deployment().name, parameters('location')), '-Storage-Container-', if(empty(parameters('blobContainers')), 'dummy', copyIndex()) )]",
            "condition": "[not(empty(parameters('blobContainers')))]",
            "dependsOn": [
                "containerLoop"
            ],
            "copy": {
                "name": "containerDeplLoop",
                "count": "[length(parameters('blobContainers'))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "blobContainer": {
                        "value": "[parameters('blobContainers')[copyIndex()]]"
                    },
                    "builtInRoleNames": {
                        "value": "[variables('builtInRoleNames')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "blobContainer": {
                            "type": "object"
                        },
                        "builtInRoleNames": {
                            "type": "object"
                        },
                        "storageAccountName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "2020-06-01",
                            "name": "[concat(deployment().name, '-Rbac-', if(empty(parameters('blobContainer').roleAssignments),'dummy', copyIndex()) )]",
                            "condition": "[not(empty(array(parameters('blobContainer').roleAssignments)))]",
                            "dependsOn": [
                            ],
                            "copy": {
                                "name": "containerRbacDeplLoop",
                                "count": "[length(array(parameters('blobContainer').roleAssignments))]"
                            },
                            "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                    "scope": "inner"
                                },
                                "parameters": {
                                    "blobContainerName": {
                                        "value": "[parameters('blobContainer').name]"
                                    },
                                    "roleAssignment": {
                                        "value": "[array(parameters('blobContainer').roleAssignments)[copyIndex('containerRbacDeplLoop')]]"
                                    },
                                    "builtInRoleNames": {
                                        "value": "[parameters('builtInRoleNames')]"
                                    },
                                    "storageAccountName": {
                                        "value": "[parameters('storageAccountName')]"
                                    }
                                },
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {
                                        "blobContainerName": {
                                            "type": "string"
                                        },
                                        "roleAssignment": {
                                            "type": "object"
                                        },
                                        "builtInRoleNames": {
                                            "type": "object"
                                        },
                                        "storageAccountName": {
                                            "type": "string"
                                        }
                                    },
                                    "resources": [
                                        {
                                            "type": "Microsoft.Storage/storageAccounts/blobServices/containers/providers/roleAssignments",
                                            "apiVersion": "2020-04-01-preview",
                                            "name": "[concat(parameters('storageAccountName'), '/default/', parameters('blobContainerName') ,'/Microsoft.Authorization/', if(empty(parameters('roleAssignment')), guid(parameters('storageAccountName')), guid(parameters('storageAccountName'), parameters('blobContainerName'), array(parameters('roleAssignment').principalIds)[copyIndex('containerRbacLoop')], parameters('roleAssignment').roleDefinitionIdOrName )))]",
                                            "condition": "[not(empty(parameters('roleAssignment')))]",
                                            "copy": {
                                                "name": "containerRbacLoop",
                                                "count": "[length(parameters('roleAssignment').principalIds)]"
                                            },
                                            "properties": {
                                                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                                                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex('containerRbacLoop')]]"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        // file share
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2019-06-01",
            "name": "[if(empty(parameters('fileShares')), concat(variables('storageAccountName'), '/', 'default/dummy'), concat(variables('storageAccountName'), '/default/', parameters('fileShares')[copyIndex()].name))]",
            "condition": "[not(empty(parameters('fileShares')))]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
            ],
            "copy": {
                "name": "fileShareLoop",
                "count": "[length(parameters('fileShares'))]"
            },
            "properties": {
                "shareQuota": "[parameters('fileShares')[copyIndex()].shareQuota]"
            }
        },
        // file share RBAC
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(uniqueString(deployment().name, parameters('location')), '-Storage-FileShare-', if(empty(parameters('fileShares')), 'dummy', copyIndex()) )]",
            "condition": "[not(empty(parameters('fileShares')))]",
            "dependsOn": [
                "fileShareLoop"
            ],
            "copy": {
                "name": "fileShareDeplLoop",
                "count": "[length(parameters('fileShares'))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "fileShare": {
                        "value": "[parameters('fileShares')[copyIndex()]]"
                    },
                    "builtInRoleNames": {
                        "value": "[variables('builtInRoleNames')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "fileShare": {
                            "type": "object"
                        },
                        "builtInRoleNames": {
                            "type": "object"
                        },
                        "storageAccountName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "2020-06-01",
                            "name": "[concat(deployment().name, '-Rbac-', if(empty(parameters('fileShare').roleAssignments),'dummy', copyIndex()) )]",
                            "condition": "[not(empty(array(parameters('fileShare').roleAssignments)))]",
                            "dependsOn": [
                            ],
                            "copy": {
                                "name": "fileShareRbacDeplLoop",
                                "count": "[length(array(parameters('fileShare').roleAssignments))]"
                            },
                            "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                    "scope": "inner"
                                },
                                "parameters": {
                                    "fileShareName": {
                                        "value": "[parameters('fileShare').name]"
                                    },
                                    "roleAssignment": {
                                        "value": "[array(parameters('fileShare').roleAssignments)[copyIndex('fileShareRbacDeplLoop')]]"
                                    },
                                    "builtInRoleNames": {
                                        "value": "[parameters('builtInRoleNames')]"
                                    },
                                    "storageAccountName": {
                                        "value": "[parameters('storageAccountName')]"
                                    }
                                },
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {
                                        "fileShareName": {
                                            "type": "string"
                                        },
                                        "roleAssignment": {
                                            "type": "object"
                                        },
                                        "builtInRoleNames": {
                                            "type": "object"
                                        },
                                        "storageAccountName": {
                                            "type": "string"
                                        }
                                    },
                                    "resources": [
                                        {
                                            "type": "Microsoft.Storage/storageAccounts/fileServices/fileshares/providers/roleAssignments",
                                            "apiVersion": "2018-09-01-preview",
                                            "name": "[concat(parameters('storageAccountName'), '/default/', parameters('fileShareName') ,'/Microsoft.Authorization/', if(empty(parameters('roleAssignment')), guid(parameters('storageAccountName')), guid(parameters('storageAccountName'), parameters('fileShareName'), array(parameters('roleAssignment').principalIds)[copyIndex('containerRbacLoop')], parameters('roleAssignment').roleDefinitionIdOrName )))]",
                                            "condition": "[not(empty(parameters('roleAssignment')))]",
                                            "copy": {
                                                "name": "containerRbacLoop",
                                                "count": "[length(parameters('roleAssignment').principalIds)]"
                                            },
                                            "properties": {
                                                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                                                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex('containerRbacLoop')]]"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        // queue
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
            "apiVersion": "2019-06-01",
            "name": "[if(empty(parameters('queues')), concat(variables('storageAccountName'), '/', 'default/dummy'), concat(variables('storageAccountName'), '/default/', parameters('queues')[copyIndex()].name))]",
            "condition": "[not(empty(parameters('queues')))]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
            ],
            "copy": {
                "name": "queueLoop",
                "count": "[length(parameters('queues'))]"
            },
            "properties": {
                "metadata": "[if(contains(parameters('queues')[copyIndex()], 'metadata'), parameters('queues')[copyIndex()].metadata, json('null'))]"
            }
        },
        // queue RBAC
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(uniqueString(deployment().name, parameters('location')), '-Storage-Queue-', if(empty(parameters('queues')), 'dummy', copyIndex()) )]",
            "condition": "[not(empty(parameters('queues')))]",
            "dependsOn": [
                "queueLoop"
            ],
            "copy": {
                "name": "queueDeplLoop",
                "count": "[length(parameters('queues'))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "queue": {
                        "value": "[parameters('queues')[copyIndex()]]"
                    },
                    "builtInRoleNames": {
                        "value": "[variables('builtInRoleNames')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "queue": {
                            "type": "object"
                        },
                        "builtInRoleNames": {
                            "type": "object"
                        },
                        "storageAccountName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "2020-06-01",
                            "name": "[concat(deployment().name, '-Rbac-', if(empty(parameters('queue').roleAssignments),'dummy', copyIndex()) )]",
                            "condition": "[not(empty(array(parameters('queue').roleAssignments)))]",
                            "dependsOn": [
                            ],
                            "copy": {
                                "name": "queueRbacDeplLoop",
                                "count": "[length(array(parameters('queue').roleAssignments))]"
                            },
                            "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                    "scope": "inner"
                                },
                                "parameters": {
                                    "queueName": {
                                        "value": "[parameters('queue').name]"
                                    },
                                    "roleAssignment": {
                                        "value": "[array(parameters('queue').roleAssignments)[copyIndex('queueRbacDeplLoop')]]"
                                    },
                                    "builtInRoleNames": {
                                        "value": "[parameters('builtInRoleNames')]"
                                    },
                                    "storageAccountName": {
                                        "value": "[parameters('storageAccountName')]"
                                    }
                                },
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {
                                        "queueName": {
                                            "type": "string"
                                        },
                                        "roleAssignment": {
                                            "type": "object"
                                        },
                                        "builtInRoleNames": {
                                            "type": "object"
                                        },
                                        "storageAccountName": {
                                            "type": "string"
                                        }
                                    },
                                    "resources": [
                                        {
                                            "type": "Microsoft.Storage/storageAccounts/queueServices/queues/providers/roleAssignments",
                                            "apiVersion": "2018-09-01-preview",
                                            "name": "[concat(parameters('storageAccountName'), '/default/', parameters('queueName') ,'/Microsoft.Authorization/', if(empty(parameters('roleAssignment')), guid(parameters('storageAccountName')), guid(parameters('storageAccountName'), parameters('queueName'), array(parameters('roleAssignment').principalIds)[copyIndex('containerRbacLoop')], parameters('roleAssignment').roleDefinitionIdOrName )))]",
                                            "condition": "[not(empty(parameters('roleAssignment')))]",
                                            "copy": {
                                                "name": "containerRbacLoop",
                                                "count": "[length(parameters('roleAssignment').principalIds)]"
                                            },
                                            "properties": {
                                                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                                                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex('containerRbacLoop')]]"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        // table
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
            "apiVersion": "2019-06-01",
            "name": "[if(empty(parameters('tables')), concat(variables('storageAccountName'), '/default/dummy'), concat(variables('storageAccountName'), '/default/', parameters('tables')[copyIndex()]))]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
            ],
            "copy": {
                "name": "tablesLoop",
                "count": "[length(parameters('tables'))]"
            }
        }
    ],
    "functions": [
    ],
    "outputs": {
        "storageAccountResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "metadata": {
                "description": "The Resource Id of the Storage Account."
            }
        },
        "storageAccountRegion": {
            "type": "string",
            "value": "[parameters('location')]",
            "metadata": {
                "description": "The Region of the Storage Account."
            }
        },
        "storageAccountName": {
            "type": "string",
            "value": "[variables('storageAccountName')]",
            "metadata": {
                "description": "The Name of the Storage Account."
            }
        },
        "storageAccountResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The name of the Resource Group the Storage Account was created in."
            }
        },
        "storageAccountSasToken": {
            "type": "securestring",
            "value": "[listAccountSas(variables('storageAccountName'), '2019-04-01', variables('accountSasProperties')).accountSasToken]",
            "metadata": {
                "description": "The SAS Token for the Storage Account."
            }
        },
        "storageAccountAccessKey": {
            "type": "securestring",
            "value": "[listKeys(variables('storageAccountName'), '2016-12-01').keys[0].value]",
            "metadata": {
                "description": "The Access Key for the Storage Account."
            }
        },
        "storageAccountPrimaryBlobEndpoint": {
            "type": "string",
            "value": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2019-04-01').primaryEndpoints.blob]",
            "metadata": {
                "description": "The public endpoint of the Storage Account."
            }
        },
        "blobContainers": {
            "type": "array",
            "value": "[parameters('blobContainers')]",
            "metadata": {
                "description": "The array of the blob containers created."
            }
        },
        "fileShares": {
            "type": "array",
            "value": "[parameters('fileShares')]",
            "metadata": {
                "description": "The array of the file shares created."
            }
        },
        "queues": {
            "type": "array",
            "value": "[parameters('queues')]",
            "metadata": {
                "description": "The array of the queues created."
            }
        },
        "tables": {
            "type": "array",
            "value": "[parameters('tables')]",
            "metadata": {
                "description": "The array of the tables created."
            }
        },
        "assignedIdentityID": {
            "type": "string",
            "value":"[if(contains(parameters('managedServiceIdentity'),'SystemAssigned'),reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01', 'full').identity.principalId,'')]",
            "metadata": {
                "description": "User id of the created system assigned identity"
            }
        }
    }
}